실습 예제: 영화 평가 시스템
목표
영화 객체를 관리하고, 다양한 기준으로 정렬할 수 있는 시스템을 구현합니다.
ArrayList를 사용하여 영화 목록을 관리하고, Collections.sort() 메서드를 이용하여 영화를 정렬합니다.
Comparable과 Comparator를 구현하여 영화를 제목, 출시 연도, 평점에 따라 정렬할 수 있게 합니다.
과제
Movie 클래스를 생성하고, 제목, 출시 연도, 평점을 속성으로 갖습니다.
Movie 클래스에서 Comparable 인터페이스를 구현하여 기본적으로 제목에 따라 정렬하도록 합니다.
제목, 출시 연도, 평점에 따라 정렬할 수 있도록 별도의 Comparator를 구현합니다.
Movie 클래스는 Comparable 인터페이스를 구현하여 제목에 따라 영화를 기본적으로 정렬합니다.
RatingComparator와 ReleaseYearComparator는 Comparator 인터페이스를 구현하여 평점과 출시 연도에 따라 영화를 정렬합니다.
Collections.sort() 메서드는 정렬 기준을 변경하기 위해 오버로드된 버전을 사용하여 Comparator를 인자로 받을 수 있습니다.

package day11.exam;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class Movie implements Comparable<Movie>{
    String title;
    int year;
    double rate;

    public Movie(String title, int year, double rate) {
        this.title = title;
        this.year = year;
        this.rate = rate;
    }

    @Override
    public int compareTo(Movie o) {
        return this.title.compareTo(o.title);
    }

    @Override
    public String toString() {
        return "Movie{" +
                "title='" + title + '\'' +
                ", year=" + year +
                ", rate=" + rate +
                '}';
    }
}

// Comparator 인터페이스 구현
class RatingComparator implements Comparator<Movie> {
    @Override
    public int compare(Movie o1, Movie o2) {
        return Double.compare(o1.rate, o2.rate);
    }
}

class ReleaseYearComparator implements Comparator<Movie>{
    @Override
    public int compare(Movie o1, Movie o2) {
        return Integer.compare(o1.year, o2.year);
    }
}

public class MovieManager {
    public static void main(String[] args) {
        List<Movie> movies = new ArrayList<>();
        movies.add(new Movie("The Shawshank Redemption", 1994, 9.3));
        movies.add(new Movie("The Godfather", 1972, 9.2));
        movies.add(new Movie("The Dark Knight", 2008, 9.0));

        // 제목 기준 정렬 (Comparable)
        Collections.sort(movies);
        System.out.println("Sorted by title:");
        movies.forEach(System.out::println);

        // 평점 기준 정렬 (Comparator)
        Collections.sort(movies, new RatingComparator());
        System.out.println("Sorted by rating:");
        movies.forEach(System.out::println);

        // 출시 연도 기준 정렬 (Comparator)
        Collections.sort(movies, new ReleaseYearComparator());
        System.out.println("Sorted by release year:");
        movies.forEach(System.out::println);
    }
}
