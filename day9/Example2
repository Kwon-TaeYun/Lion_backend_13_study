실습 예제: 다중 텍스트 관리 시스템
목표
사용자로부터 여러 줄의 텍스트를 입력받아 파일에 저장하고, 저장된 파일의 내용을 리스트에 저장한 후 출력합니다.
이 과정을 클래스와 메소드를 적절하게 사용하여 구현합니다.
설계
TextFileManager 클래스 - 파일 쓰기와 읽기 작업을 담당합니다.
UserInputHandler 클래스 - 사용자로부터의 입력을 처리합니다.
Application 클래스 - 애플리케이션의 주 실행 로직을 관리합니다.
설명
TextFileManager: 파일 I/O 작업을 캡슐화합니다. 파일 쓰기와 읽기 기능을 메소드로 제공합니다.
UserInputHandler: 사용자 입력을 처리합니다. 사용자로부터 문자열을 입력받아 리스트로 반환하는 메소드를 포함합니다.
Application: 메인 클래스로, 애플리케이션의 로직을 조정하며, 사용자 입력을 파일에 저장하고 파일에서 읽은 데이터를 출력합니다.

package day12.exam;

import java.io.IOException;
import java.util.List;


public class Application {
    public static void main(String[] args) {
        String filePath = "texts.txt";
        TextFileManager fileManager = new TextFileManager(filePath);
        UserInputHandler inputHandler = new UserInputHandler();

        try {
            List<String> userInput = inputHandler.getUserInput();
            fileManager.writeToFile(userInput);

            List<String> fileContent = fileManager.readFromFile();
            System.out.println("Content of the file:");
            fileContent.forEach(System.out::println);
        } catch (Exception e) {
            System.err.println("An error occurred: " + e.getMessage());
        }
    }
}

package day12.exam;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class TextFileManager {
    private String filePath;

    public TextFileManager(String filePath) {
        this.filePath = filePath;
    }

    public void writeToFile(List<String> userInput) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            for (String line : userInput) {
                writer.write(line);
                writer.newLine(); // Add a new line after each input
            }
            System.out.println("데이터가 파일에 저장되었습니다: " + filePath);
        } catch (IOException e) {
            System.out.println("파일 쓰기 중 오류가 발생했습니다: " + e.getMessage());
        }
    }

    public List<String> readFromFile() {
        List<String> lines = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                lines.add(line);
            }
        } catch (IOException e) {
            System.out.println("파일 읽기 중 오류가 발생했습니다: " + e.getMessage());
        }
        return lines;
    }
}

package day12.exam;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class UserInputHandler {
    private List<String> userInput = new ArrayList<>();

    public List<String> getUserInput() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        List<String> inputs = new ArrayList<>();

        System.out.println("Enter lines of text (type 'exit' to finish):");
        while (true) {
            System.out.print(">> ");
            String line = br.readLine();
            if ("exit".equalsIgnoreCase(line)) {
                break;
            }
            inputs.add(line);
        }
        return inputs;
    }
}

